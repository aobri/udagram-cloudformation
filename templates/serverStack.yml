Description: >
  Ahmed Yassin / Project 2 / Udagram Network Infrastructure
  
  This template deploys an Auto Scaling Group (ASG) for EC2 instances with a Launch Configuration across 2 availability zones (private subnets). 
  Also deploys an Elastic Load Balancer (ELB) with a Listener, Listener Rule and Target Group for the Load Balancing 
  to forward HTTP requests from port 80 to the targeted EC2 instances. 
  Servers have S3 IAM profile access. 

####################################################################################################
Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  Ec2InstanceType:
    Description: EC2 instance type for launch configuration
    Type: String
  Ec2InstanceImageId:
    Description: Image used to launch EC2 instances when Auto-scaling
    Type: String

####################################################################################################
Resources:

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  UdagramAsgLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
    # Using Apache HTTPD Server installation directly  
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service 
          echo "<h1>it works! Udagram, Udacity</h1>" > /var/www/html/index.html
      ImageId: !Ref Ec2InstanceImageId
      # ToDo: Change the key-pair name, as applicable to you.
      KeyName: aws-ssh-key-pair	
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: !Ref Ec2InstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  UdagramAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: UdagramAsgLaunchConfig
      MinSize: '4'
      MaxSize: '5'
      TargetGroupARNs:
      - Ref: UdagramLoadBalancerTargetGroup

  UdagramElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: UdagramLoadBalancerTargetGroup
      LoadBalancerArn:
        Ref: UdagramElasticLoadBalancer
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'UdagramLoadBalancerTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  UdagramLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"


####################################################################################################
Outputs: 

  UdagramUrl:
    Description: URL for Udagram through the Load Balancer.
    Value: !Join [ "", [ 'http://', !GetAtt UdagramElasticLoadBalancer.DNSName ]]
    Export: 
        Name: !Sub ${EnvironmentName}-URL
